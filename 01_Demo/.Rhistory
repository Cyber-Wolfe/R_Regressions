library(knitr)
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
print(presidents)
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
library(knitr)
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
library(knitr)
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
combined_vector <- c(disney_characters, presidents)
combined_vector
# A for-loop
for (x in combined_vector) {
print(x)
}
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
print(numeric_vector)
print(squared_vector)
if ((nchar(name)) > 3){
print("Not a nickname")
}
if ((nchar(x)) > 3){
print("Not a nickname")
}
# nchar() returns the number of characters
for (prez in presidents) {
if (nchar(prez) > 5) {
next
}
else {
print(prez)
}
}
# nchar() returns the number of characters
for (prez in presidents) {
if (nchar(prez) > 5) {
next
}
else {
print(prez)
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
}
#  if ((nchar(x)) > 3){
print("Not a nickname")
#  if ((nchar(x)) > 3){
print(x)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students)
#  if ((nchar(x)) > 3){
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
}
# Create a for loop
for (x in students)
#  if ((nchar(x)) > 3){
print(x)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students)
#  if ((nchar(x)) > 3){
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Create a for loop
for (x in students)
# Create a for loop
for (x in students){
#  if ((nchar(x)) > 3){
print(x)
}
# Create a for loop
for (x in students){
#  if ((nchar(x)) > 3){
print(x)
}
# Create a for loop
for (x in students){
print(x)
}
# Create a for loop
for (x in students){
print(x)
}
students
# Part I
students <- c("jason", "dan","bobby","kelby","danny",'erik','tom',"vic")
# Create a for loop
for (x in students){
print(x)
}
# Part I
students <- c("jason", "dan","bobby","kelby","danny",'erik','tom',"vic")
roll_call <- function(class){
# Create a for loop
for (x in students){
print(x)
}
# Create a for loop
for (x in students){
print(x)
}
for
# Create a for loop
for (x in students){
print(x)
}
# Part I
students <- c("jason", "dan","bobby","kelby","danny",'erik','tom',"vic")
roll_call <- function(class){
# Create a for loop
for (x in students){
print(x)
}
# Part I
students <- c("jason", "dan","bobby","kelby","danny",'erik','tom',"vic")
# Create a for loop
for (x in students){
print(x)}
# Create a for loop
for (x in students){
print(x)}
# Create a for loop
for (x in students){
print(x)}
students <- c("jason", "dan","bobby","kelby","danny",'erik','tom',"vic")
# Create a for loop
for (x in students){
print(x)}
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students){
print(x)}}
# Part I
students <- c("jason", "dan","bobby","kelby","danny",'erik','tom',"vic")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students){
print(x)}}
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students){
print(x)}}
print(x)}}
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)}}
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)}}
roll_call(students)
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (st in class){
print(st)
combination <- sample(33,3)
print(combination)
}
}
locker_combinations <- function(class){
for (st in class){
print(st)
combination <- sample(33,3)
print(combination)
}
}
locker_combinations(students)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
# Assign months to precipitation as names
names(precipitation) <- months
# Display names of precipitation
print(names(precipitation))
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
install.packages("tidyverse")
> install.packages("jsonlite")
install.packages("jsonlite")
setwd("G:/Bootcamp Work/Module Deliverables/R_Regressions")
setwd("G:/Bootcamp Work/Module Deliverables/R_Regressions/01_Demo")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(demo_table)
View(demo_table)
View(demo_table)
library(jsonlite)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table
filter_table <- demo_table2[demo_table2$price > 10000,]
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
View(demo_table)
View(demo_table)
View(demo_table2)
View(demo_table2)
View(filter_table)
View(filter_table2)
View(summarize_demo)
View(summarize_demo)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(long_table)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
View(plt)
plt + geom_bar() #plot a bar plot
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
